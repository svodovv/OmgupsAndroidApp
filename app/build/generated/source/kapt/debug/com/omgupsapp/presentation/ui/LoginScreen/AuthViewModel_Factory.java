// Generated by Dagger (https://dagger.dev).
package com.omgupsapp.presentation.ui.LoginScreen;

import com.omgupsapp.domain.use_case.login.AuthenticationUseCase;
import com.omgupsapp.domain.use_case.login.GetCsrfTokenUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AuthViewModel_Factory implements Factory<AuthViewModel> {
  private final Provider<GetCsrfTokenUseCase> getCsrfTokenUseCaseProvider;

  private final Provider<AuthenticationUseCase> authenticationUseCaseProvider;

  public AuthViewModel_Factory(Provider<GetCsrfTokenUseCase> getCsrfTokenUseCaseProvider,
      Provider<AuthenticationUseCase> authenticationUseCaseProvider) {
    this.getCsrfTokenUseCaseProvider = getCsrfTokenUseCaseProvider;
    this.authenticationUseCaseProvider = authenticationUseCaseProvider;
  }

  @Override
  public AuthViewModel get() {
    return newInstance(getCsrfTokenUseCaseProvider.get(), authenticationUseCaseProvider.get());
  }

  public static AuthViewModel_Factory create(
      Provider<GetCsrfTokenUseCase> getCsrfTokenUseCaseProvider,
      Provider<AuthenticationUseCase> authenticationUseCaseProvider) {
    return new AuthViewModel_Factory(getCsrfTokenUseCaseProvider, authenticationUseCaseProvider);
  }

  public static AuthViewModel newInstance(GetCsrfTokenUseCase getCsrfTokenUseCase,
      AuthenticationUseCase authenticationUseCase) {
    return new AuthViewModel(getCsrfTokenUseCase, authenticationUseCase);
  }
}
